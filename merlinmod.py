import sys
import os
import re

class merlinmod:

	father = {}
	mother = {}
	error_info = {}
	


	#def __init__(self):
		
	#read linkage ped file
	def read_ped(self, pedfile):
		f = open(pedfile,'r')
		for line in f:
			line = line.replace('/','\t').replace(' ','\t')
			line = line.strip().split('\t')
			fam = line[0]
			ind = line[1]
			father = line[2]
			mother = line[3]
			
			key = fam,ind
			
			if key not in self.father.keys() and father != '0':
				self.father[key] = father
			elif key in self.father.keys():
				if self.father[key] != father:
					print 'different father',ind
			if key not in self.mother.keys() and mother != '0':
				self.mother[key] = mother
			elif key in self.mother.keys():
				if self.mother[key] != mother:
					print 'different mother',ind
		f.closed
	
	#extract mendelian error and write output
	def extract_output(self, error_file):
		f = open(error_file,'r')
		father = ''
		mother = ''
		upn = ''
		marker = ''
		fam = ''
		pattern = re.compile(r'.+[Child|Father|Mother|.+] (.+) \[.+\] has (\w+).+')
		error_list = []
		for line in f:
			marker = line.split('-')[0]
			fam = '-'.join(line.split('-')[1:])
			fam = fam.split(':')[0].replace(' ','').replace('Fam','')
			marker = marker.replace(' ','')
			
			try:
				m = pattern.search(line).groups()
				idv = m[0]
				relation = m[1]

				key = fam,idv
			
				item = fam,idv,marker
				if item not in error_list:
					error_list.append(item)
			
				if relation == 'parents':
					try:
						item = fam,self.father[key],marker
						if item not in error_list:
							error_list.append(item)
					except KeyError:
						print 'key error',key
					try:
						item = fam,self.mother[key],marker
						if item not in error_list:
							error_list.append(item)
					except KeyError:
						print 'key error',key
				elif relation == 'father':
					try:
						item = fam,self.father[key],marker
						if item not in error_list:
							error_list.append(item)
					except KeyError:
						print 'key error',key
				elif relation == 'mother':
					try:
						item = fam,self.mother[key],marker
						if item not in error_list:
							error_list.append(item)
					except KeyError:
						print 'key error',key
				else:
					print '#######',line
			except Exception:
				print line
				pass
			
		f.closed
	
		w = open('error_list.txt','w')
		string = 'SAMPLE\tMARKER\n'
		w.write(string)
		for i in error_list:
			f,s,m = i
			#string = '%s\t%s\t%s\n' %(f,s,m)
			string = '%s\t%s\n' %(s,m)
			w.write(string)
		w.closed
		
	#read error file generated by extract_output()
	def read_error(self, error_list):
		dic = {}
		f = open(error_list,'r')
		for line in f:
			line = line.replace('\r','').replace('\n','')
			line = line.split('\t')
			ind = line[0]
			marker = line[1]
			try:
				temp = dic[ind]
			except KeyError:
				temp = []
			temp.append(marker)
			dic[ind] = temp
		f.closed
		self.error_info = dic
	
	#mask genotype with mendelian errors
	def mask_geno(self, pedfile, datfile):
	
		#read dat file
		count = 6
		marker_pos = {}
		flag = 1
		f = open(datfile,'r')
		f.readline()
		col_count = 7
		for line in f:
			line = line.replace('\r','').replace('\n','')
			line = line.split('\t')
			sign = line[0]
			marker = line[1]
			col_count += 1
			if sign[0] == 'M':
				col_count += 1
				marker_pos[count] = marker
				count += 1
				marker_pos[count] = marker
				count += 1
		f.closed
		
		
		
		#check ped length
		f = open(pedfile,'r')
		line_count = 1
		for line in f:
			line = line.split('\t')
			if len(line) != col_count:
				flag = 0
			line_count += 1
		f.closed
		flag = 1
		if flag == 1:
			#read ped file
			f = open(pedfile,'r')
			fname = 'masked_%s' %pedfile
			w = open(fname,'w')
			linenum = 1
			for line in f:
				linenum += 1
				line = line.replace('\r','').replace('\n','')
				line = line.split('\t')
				try:
					ind = line[1]
				except Exception:
					print linenum,line
				for i in range(6,len(line)):
					try:
						error_marker = self.error_info[ind]
						if marker_pos[i] in error_marker:
							line[i] = "#"+line[i]
					except KeyError:
						pass
				string = '\t'.join(line)
				string = '%s\r\n' %string
				w.write(string)
			f.closed
			w.closed
	
		
	#extract mendelian error, output:error_list.txt
	def mErrExtract(self, pedfile, errfile):
		self.read_ped(pedfile)
		self.extract_output(errfile)
	
	#mask error
	def mMaskErr(self, pedfile, datfile, error_list):
		self.read_error(error_list)
		self.mask_geno(pedfile, datfile)
	

		
